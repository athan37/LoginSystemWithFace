import os
import cv2
import joblib
import numpy as np
import config as cfg

from extract_face import loadDataFromImagesPath
from sklearn.preprocessing import LabelEncoder

################################################################################
# Class:          LocalImagesDataManager
# Author:         Duc Anh
# Last modified:  30 May 2021

################################################################################

class LocalImagesDataManager:
    """
    This class is responsible for managing the training data, images in local
    device. It will be initialize once by the App class. The only methods that
    can be called outside this class is registerNewData. So that, the main
    purpose of this class is processing new images when a new user register.


    Attributes:
        base_dir : str
            Base directory, which is the local database directory
        images_dir : str
            Base images directory, containg new images from new user
        X_filename : str
            The name in local database for training features
        y_filename : str
            The name in local database for labels features
        le_filename : str
            File name for the label encoder
        detector : open cv model
            The face detection detector

        ============== atrtributes in __loadPreProcessedData ===================
        X : numpy.ndarray
            The training features
        y : numpy.ndarray
            The training labels
        le_filename : sklearn.preprocessing.LabelEncoder
            The label encoder for training labels

    Methods:
        registerNewData(dir_name)
            Append new data and save it by accessing the new directory
        __loadPreProcessedData()
            Read data from the local files
        __appendNewData()
            Add new data to this class
        __savePreProcessedData()
            Save this class's data as csv files
        __initDataFromImages()
            Reading the default img data
        loadDataFromImagesPath()
            Pass the detector as argument to loadDataFromImagesPath

    """
    def __init__(self, detector):
        """
        Initialize attributes. It checks if the base_dir (currently local_db)
        and the images_dir. It will create these directories if they don't
        exist.

        It will get the default data first, by calling __initDataFromImages.
        Then, to initialize training data, it calls __loadPreProcessedData().

        Params:
        -------
        detector : open cv model
            The face detection detector

        """
        self.base_dir     = os.path.join(os.getcwd(), cfg.local["BASE_DB"])
        self.images_dir   = os.path.join(self.base_dir, cfg.local["IMG_DIR"])
        self.X_filename   = os.path.join(self.base_dir, cfg.data["X_NAME"])
        self.y_filename   = os.path.join(self.base_dir, cfg.data["y_NAME"])
        self.le_filename  = os.path.join(self.base_dir, cfg.models["LE_NAME"])
        self.detector     = detector

        if not os.path.exists(self.base_dir):
            os.mkdir(self.base_dir)

        if not os.path.exists(self.images_dir):
            os.mkdir(self.images_dir)

        #Load basic information here
        self.__initDataFromImages() #Init before load
        self.__loadPreProcessedData()

    #Main methods ==============================================================
    def registerNewData(self, dir_name):
        """
        This method registers new user images. To the local database, it will
        save these file as .csv and the label encoder as .pkl.

        Params:
        -------
        dir_name : str
            The directory generated by new user name and username

        Return:
        -------
            tuple
                The features and labels of the new dataset after register new
                user
        """
        self.__appendNewData(dir_name)
        self.__savePreProcessedData()
        return self.X, self.y

    #Helpers ===================================================================
    def __loadPreProcessedData(self):
        """
        Loads data from the training features and labels filename with the
        label encoder from the same directory.

        After loading, it set the attributes of the class to new features and
        labels

        Params:
        -------
            None

        Return:
        -------
            None
        """
        le    = joblib.load(self.le_filename)
        X     = np.loadtxt(self.X_filename, delimiter=',').astype(int)
        raw_y = np.loadtxt(self.y_filename, delimiter=',').astype(int)
        y     = le.inverse_transform(raw_y)
        ##Initialize atrtribute for this class
        self.le, self.X, self.y = le, X, y

    def __appendNewData(self, dir_name):
        """
        Append new features and labels to the current attributes. The labels
        array is extend normally using python .extends. The training features
        is stacked vertically with the new data to keep the same order.

        Params:
        -------
            dir_name : str
                The directory formed by new user's user name + name

        Return:
        -------
            None

        """
        person_path  = os.path.join(self.base_dir, self.images_dir, dir_name)
        new_X, new_y = loadDataFromImagesPath(self.detector, person_path)
        #Easy expend 2 dimension array vertically using vs stack
        self.y, new_y  = list(self.y), list(new_y)
        self.y.extend(new_y) #Expand 1d array in pythonic way
        self.X, self.y = np.vstack((self.X, new_X)), np.asarray(self.y)

    def __savePreProcessedData(self):
        """
        Save the current X, y, le attriutes as a file for later usage.

        Params:
        -------
            None

        Return:
        -------
            None

        """
        np.savetxt(self.X_filename, self.X, delimiter=',')
        np.savetxt(self.y_filename, self.le.fit_transform(self.y), delimiter=',')
        #Need to save the label Enconder to inverse transform later
        joblib.dump(self.le, self.le_filename)

        print("Saved X and y")

    def __initDataFromImages(self):
        """
        Get data from the default images folder to generate the initial data.
        This is because the svc model of this application needs more than 150
        samples to make the pca works correctly.

        Params:
        -------
        None

        Return:
        -------
        None

        """
        #Check if the local_db exist
        initial_dirs = os.listdir(os.getcwd())
        is_db_empty  = False
        if len(os.listdir(self.base_dir)) == 1: #Empty here means no person data
            [images_dir] = os.listdir(self.base_dir)
            is_db_empty  = images_dir == cfg.local["IMG_DIR"]
        if cfg.local["DEFAULT_IMGS_DIR"] in initial_dirs and is_db_empty:
            default_path    = os.path.join(os.getcwd(), cfg.local["DEFAULT_IMGS_DIR"])
            self.X, self.y  = loadDataFromImagesPath(self.detector, default_path)
            self.le         = LabelEncoder()
            #Nothing relate to mapping name to dir here, we don't care about
            #This data because of the user doesn't exist in the database
            self.__savePreProcessedData()
